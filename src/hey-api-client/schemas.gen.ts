// This file is auto-generated by @hey-api/openapi-ts

export const ErrorSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            description: 'The error code.'
        },
        message: {
            type: 'string',
            description: 'The error message.'
        }
    },
    required: ['code', 'message']
} as const;

export const ScopeNameSchema = {
    type: 'string',
    pattern: '/^[a-z][a-z0-9]*(?:-[a-z0-9]+)*$/',
    description: 'The name of a scope. This must not be @ prefixed.',
    example: 'denoland'
} as const;

export const ScopeSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        creator: {
            '$ref': '#/components/schemas/User'
        },
        quotas: {
            type: 'object',
            properties: {
                packageUsage: {
                    type: 'integer',
                    description: 'The number of packages in the scope.',
                    example: 3
                },
                packageLimit: {
                    type: 'integer',
                    description: 'The maximum number of packages allowed in the scope.',
                    example: 10
                },
                newPackagePerWeekUsage: {
                    type: 'integer',
                    description: 'The number of new packages created in the scope in the last week.',
                    example: 1
                },
                newPackagePerWeekLimit: {
                    type: 'integer',
                    description: 'The maximum number of new packages allowed to be created in the scope in a week.',
                    example: 5
                },
                publishAttemptsPerWeekUsage: {
                    type: 'integer',
                    description: 'The number of times packages in the scope have been published in the last week.',
                    example: 1
                },
                publishAttemptsPerWeekLimit: {
                    type: 'integer',
                    description: 'The maximum number of times packages in the scope can be published in a week.',
                    example: 5
                }
            }
        },
        ghActionsVerifyActor: {
            type: 'boolean',
            description: 'Whether to verify the actor of a GitHub Actions run when authenticating publishing with a GitHub Actions OIDC token.'
        },
        requirePublishingFromCI: {
            type: 'boolean',
            description: 'Whether to require publishing from a CI environment. This disables publishing from a local environment.'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the scope was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the scope was last updated.'
        }
    },
    required: ['scope', 'createdAt', 'updatedAt']
} as const;

export const CreateScopeRequestSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        }
    },
    required: ['name']
} as const;

export const UpdateScopeRequestSchema = {
    oneOf: [
        {
            type: 'object',
            properties: {
                ghActionsVerifyActor: {
                    type: 'boolean',
                    description: 'Whether to verify the actor of a GitHub Actions run when authenticating publishing with a GitHub Actions OIDC token.'
                }
            },
            required: ['ghActionsVerifyActor']
        },
        {
            type: 'object',
            properties: {
                requirePublishingFromCI: {
                    type: 'boolean',
                    description: 'Whether to require publishing from a CI environment. This disables publishing from a local environment.'
                }
            },
            required: ['requirePublishingFromCI']
        }
    ]
} as const;

export const ScopeMemberSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        isAdmin: {
            type: 'boolean',
            description: 'Whether the user is an admin of the scope.'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the user was added to the scope.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the scope member roles were last updated.'
        }
    },
    required: ['scope', 'user', 'isAdmin', 'createdAt', 'updatedAt']
} as const;

export const ScopeInviteSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        targetUser: {
            allOf: [
                {
                    '$ref': '#/components/schemas/User'
                },
                {
                    description: 'The user that the invite is for.'
                }
            ]
        },
        inviter: {
            allOf: [
                {
                    '$ref': '#/components/schemas/User'
                },
                {
                    description: 'The user that sent the invite.'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the invite was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the invite was last updated.'
        }
    },
    required: ['scope', 'targetUser', 'inviter', 'createdAt', 'updatedAt']
} as const;

export const UserIdSchema = {
    type: 'string',
    format: 'uuid',
    description: 'The ID of a user.'
} as const;

export const UserSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/UserId'
        },
        name: {
            type: 'string',
            description: "The user's display name.",
            example: 'Ryan Dahl'
        },
        email: {
            type: 'string',
            description: "The user's email address.",
            example: 'ry@example.com'
        },
        avatarUrl: {
            type: 'string',
            description: "The URL to the user's avatar.",
            example: 'https://avatars.githubusercontent.com/u/80?v=4'
        },
        githubId: {
            type: 'integer',
            description: "The user's GitHub ID.",
            example: 80
        },
        isBlocked: {
            type: 'boolean',
            description: 'Whether the user is blocked from using the registry.'
        },
        isStaff: {
            type: 'boolean',
            description: 'Whether the user is a staff member.'
        },
        scopeUsage: {
            type: 'integer',
            description: 'The number of scopes the user created.',
            example: 3
        },
        scopeLimit: {
            type: 'integer',
            description: 'The maximum number of scopes the user can create.',
            example: 10
        },
        inviteCount: {
            type: 'integer',
            description: 'The number of invites pending for the user.',
            example: 3
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the user profile was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the user profile was last updated.'
        }
    },
    required: ['id', 'name', 'avatarUrl', 'createdAt', 'updatedAt']
} as const;

export const AddScopeMemberRequestSchema = {
    type: 'object',
    properties: {
        githubLogin: {
            type: 'string',
            description: 'The GitHub login of the user to add to the scope.',
            example: 'ry'
        }
    },
    required: ['githubLogin']
} as const;

export const UpdateScopeMemberRequestSchema = {
    type: 'object',
    properties: {
        isAdmin: {
            type: 'boolean',
            description: 'Whether the user should be an admin of the scope.'
        }
    },
    required: ['isAdmin']
} as const;

export const GitHubRepositorySchema = {
    type: 'object',
    properties: {
        owner: {
            type: 'string',
            description: 'The GitHub user / organization of the repository.',
            example: 'denoland'
        },
        name: {
            type: 'string',
            description: 'The GitHub repository name.',
            example: 'deno'
        }
    }
} as const;

export const PackageNameSchema = {
    type: 'string',
    pattern: '/^[a-z][a-z0-9]*(?:-[a-z0-9]+)*$/',
    description: 'The name of a package.',
    example: 'fmt'
} as const;

export const PackageSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        name: {
            '$ref': '#/components/schemas/PackageName'
        },
        description: {
            type: 'string',
            description: 'The description of the package.',
            example: 'A module for formatting strings.'
        },
        runtimeCompat: {
            '$ref': '#/components/schemas/RuntimeCompat'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the package was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the package was last updated.'
        },
        githubRepository: {
            '$ref': '#/components/schemas/GitHubRepository'
        },
        score: {
            type: 'number'
        }
    },
    required: ['scope', 'name', 'description', 'createdAt', 'updatedAt']
} as const;

export const CreatePackageRequestSchema = {
    type: 'object',
    properties: {
        package: {
            '$ref': '#/components/schemas/PackageName'
        }
    },
    required: ['package']
} as const;

export const UpdatePackageRequestSchema = {
    oneOf: [
        {
            type: 'object',
            properties: {
                description: {
                    type: 'string',
                    pattern: '^.{0,250}$',
                    description: 'The description of the package.'
                }
            },
            required: ['description']
        },
        {
            type: 'object',
            properties: {
                githubRepository: {
                    type: 'object',
                    nullable: true,
                    properties: {
                        owner: {
                            type: 'string',
                            description: 'The GitHub user / organization of the repository.',
                            example: 'denoland'
                        },
                        repo: {
                            type: 'string',
                            description: 'The GitHub repository name.',
                            example: 'deno'
                        }
                    },
                    required: ['owner', 'repo']
                }
            },
            required: ['githubRepository']
        },
        {
            type: 'object',
            properties: {
                runtimeCompat: {
                    '$ref': '#/components/schemas/RuntimeCompat'
                }
            },
            required: ['runtimeCompat']
        },
        {
            type: 'object',
            properties: {
                isArchived: {
                    type: 'boolean',
                    description: 'Whether this package should be archived or not.'
                }
            },
            required: ['isArchived']
        }
    ]
} as const;

export const RuntimeCompatSchema = {
    type: 'object',
    properties: {
        browser: {
            type: 'boolean',
            nullable: true,
            description: 'Whether the package is compatible with web browsers.'
        },
        deno: {
            type: 'boolean',
            nullable: true,
            description: 'Whether the package is compatible with Deno.'
        },
        node: {
            type: 'boolean',
            nullable: true,
            description: 'Whether the package is compatible with Node.js.'
        },
        workerd: {
            type: 'boolean',
            nullable: true,
            description: 'Whether the package is compatible with workerd.'
        },
        bun: {
            type: 'boolean',
            nullable: true,
            description: 'Whether the package is compatible with Bun.'
        }
    }
} as const;

export const VersionSchema = {
    type: 'string',
    description: 'A semantic version.',
    example: '1.2.3'
} as const;

export const DependentSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        name: {
            '$ref': '#/components/schemas/PackageName'
        },
        versions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Version'
            }
        },
        totalVersions: {
            type: 'integer',
            description: 'The total number of versions of the package.'
        }
    },
    required: ['scope', 'name', 'version', 'totalVersions']
} as const;

export const PackageVersionSchema = {
    type: 'object',
    properties: {
        scope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        package: {
            '$ref': '#/components/schemas/PackageName'
        },
        version: {
            '$ref': '#/components/schemas/Version'
        },
        yanked: {
            type: 'boolean',
            description: 'Whether the version has been yanked.'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the package version was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the package version was last updated.'
        },
        rekorLogId: {
            type: 'string',
            description: 'Rekor log ID for the published package version.'
        }
    },
    required: ['scope', 'name', 'version', 'yanked', 'createdAt', 'updatedAt']
} as const;

export const UpdatePackageVersionRequestSchema = {
    type: 'object',
    properties: {
        yanked: {
            type: 'boolean',
            description: 'Whether the version is yanked or not.'
        }
    },
    required: ['yanked']
} as const;

export const PublishingTaskSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            description: 'The ID of the publishing task.'
        },
        status: {
            type: 'string',
            description: 'The status of the publishing task.',
            enum: ['pending', 'processing', 'processed', 'success', 'failure']
        },
        error: {
            type: 'object',
            nullable: true,
            properties: {
                code: {
                    type: 'string',
                    description: 'The error code.'
                },
                message: {
                    type: 'string',
                    description: 'The error message.'
                }
            }
        },
        userId: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserId'
                },
                {
                    type: 'null'
                }
            ]
        },
        packageScope: {
            '$ref': '#/components/schemas/ScopeName'
        },
        packageName: {
            '$ref': '#/components/schemas/PackageName'
        },
        packageVersion: {
            '$ref': '#/components/schemas/Version'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the publishing task was created.'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the publishing task was last updated.'
        }
    },
    required: ['id', 'status', 'error', 'userId', 'packageScope', 'packageName', 'packageVersion', 'createdAt', 'updatedAt']
} as const;

export const DependencySchema = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            description: 'The kind of dependency.',
            enum: ['jsr', 'npm']
        },
        name: {
            type: 'string',
            description: 'The fully qualified name of the dependency.',
            example: '@std/fs'
        },
        constraint: {
            type: 'string',
            description: 'The semver constraint of the dependency.',
            example: '^0.50.0'
        },
        path: {
            type: 'string',
            description: 'The path being imported from the dependency. This may be the empty string if the "default entrypoint" is being imported.',
            example: '/exists'
        }
    },
    required: ['kind', 'name', 'constraint', 'path']
} as const;

export const AuthorizationSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            description: 'The authorization code.'
        },
        permissions: {
            type: 'array',
            description: 'The permissions that the token will have.',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time until which the authorization can be approved / exchanged.'
        }
    },
    required: ['code', 'permissions', 'expiresAt']
} as const;

export const PermissionSchema = {
    oneOf: [
        {
            type: 'object',
            properties: {
                permission: {
                    type: 'string',
                    description: 'The permission name.',
                    enum: ['package/publish']
                },
                scope: {
                    '$ref': '#/components/schemas/ScopeName'
                }
            },
            required: ['permission', 'scope']
        },
        {
            type: 'object',
            properties: {
                permission: {
                    type: 'string',
                    description: 'The permission name.',
                    enum: ['package/publish']
                },
                scope: {
                    '$ref': '#/components/schemas/ScopeName'
                },
                package: {
                    '$ref': '#/components/schemas/PackageName'
                }
            },
            required: ['permission', 'scope', 'package']
        },
        {
            type: 'object',
            properties: {
                permission: {
                    type: 'string',
                    description: 'The permission name.',
                    enum: ['package/publish']
                },
                scope: {
                    '$ref': '#/components/schemas/ScopeName'
                },
                package: {
                    '$ref': '#/components/schemas/PackageName'
                },
                version: {
                    '$ref': '#/components/schemas/Version'
                },
                tarballHash: {
                    type: 'string',
                    description: 'The SHA256 hash of the tarball.'
                }
            },
            required: ['permission', 'scope', 'package', 'version', 'tarballHash']
        }
    ]
} as const;

export const CreateAuthorizationRequestSchema = {
    type: 'object',
    properties: {
        challenge: {
            type: 'string',
            description: 'The challenge that will later be needed to retrieve the token after authorization.',
            example: '1234567890abcdef'
        },
        permissions: {
            type: 'array',
            description: 'The permissions that the token will have.',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        }
    },
    required: ['challenge']
} as const;

export const CreateAuthorizationResponseSchema = {
    type: 'object',
    properties: {
        verificationUrl: {
            type: 'string',
            description: 'The URL that the user should visit to approve the authorization.'
        },
        code: {
            type: 'string',
            description: 'The authorization code that the user can manually enter if they can not directly visit the link.'
        },
        exchangeToken: {
            type: 'string',
            description: 'The token that can be used to exchange for a device token after the authorization has been approved.'
        },
        pollInterval: {
            type: 'integer',
            description: 'The number of seconds that should be waited between polling the status of the authorization.'
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time until which the authorization can be approved / exchanged.'
        }
    },
    required: ['verification_url', 'code', 'exchangeToken', 'pollInterval', 'expiresAt']
} as const;

export const AuthorizationExchangeRequestSchema = {
    type: 'object',
    properties: {
        exchangeToken: {
            type: 'string',
            description: 'The token that can be used to exchange for a device token after the authorization has been approved.'
        },
        verifier: {
            type: 'string',
            description: 'The verifier that was used to generate the challenge.'
        }
    },
    required: ['exchangeToken', 'verifier']
} as const;

export const AuthorizationExchangeResponseSchema = {
    type: 'object',
    properties: {
        token: {
            type: 'string',
            description: 'The device token that can be used to authenticate requests.'
        },
        user: {
            allOf: [
                {
                    '$ref': '#/components/schemas/User'
                },
                {
                    description: 'The user that the token is for.'
                }
            ]
        }
    },
    required: ['token', 'user']
} as const;

export const StatsSchema = {
    type: 'object',
    properties: {
        newest: {
            type: 'array',
            description: 'The newest packages.',
            items: {
                '$ref': '#/components/schemas/Package'
            }
        },
        updated: {
            type: 'array',
            description: 'The recently uploaded package versions.',
            items: {
                '$ref': '#/components/schemas/PackageVersion'
            }
        },
        featured: {
            type: 'array',
            description: 'The featured packages',
            items: {
                '$ref': '#/components/schemas/Package'
            }
        }
    },
    required: ['newest', 'updated', 'featured']
} as const;

export const PackageScoreSchema = {
    type: 'object',
    properties: {
        hasReadme: {
            type: 'boolean'
        },
        hasReadmeExamples: {
            type: 'boolean'
        },
        allEntrypointsDocs: {
            type: 'boolean'
        },
        percentageDocumentedSymbols: {
            type: 'number'
        },
        allFastCheck: {
            type: 'boolean'
        },
        hasProvenance: {
            type: 'boolean'
        },
        hasDescription: {
            type: 'boolean'
        },
        atLeastOneRuntimeCompatible: {
            type: 'boolean'
        },
        multipleRuntimesCompatible: {
            type: 'boolean'
        },
        total: {
            type: 'integer'
        }
    },
    required: ['hasReadme', 'hasReadmeExamples', 'allEntrypointsDocs', 'percentageDocumentedSymbols', 'allFastCheck', 'hasProvenance', 'hasDescription', 'atLeastOneRuntimeCompatible', 'multipleRuntimesCompatible']
} as const;